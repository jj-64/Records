generator = Yang_series,
param_name = "gamma",
n_arg = "T",
test_fun = Test_DTRW_NT, #Test_DTRW_bonf,
series_args = list(dist="weibull",shape=5, scale=1)
)
plot_results(m_R_y, "gamma", "DTRW vs YNM - Weibull", xlab = "Gamma (γ)")
gamma <- seq(1.01, 1.8, by=0.1)
m_R_y <- simulate_model(
param_values = gamma,
T = T,
sim = sim,
generator = Yang_series,
param_name = "gamma",
n_arg = "T",
test_fun = Test_DTRW_NT, #Test_DTRW_bonf,
series_args = list(dist="weibull",shape=5, scale=1)
)
plot_results(m_R_y, "gamma", "DTRW vs YNM - Weibull", xlab = "Gamma (γ)")
if(save == TRUE) {save_results(m_R_y, paste0(save_path,"/DTRW NT.xlsx"), "Yang_Weibull_5_1")}
gamma <- seq(1.01, 1.8, by=0.1)
m_R_y <- simulate_model(
param_values = gamma,
T = T,
sim = sim,
generator = Yang_series,
param_name = "gamma",
n_arg = "T",
test_fun = Test_DTRW_NT, #Test_DTRW_bonf,
series_args = list(dist="gumbel",loc=0, scale=1)
)
plot_results(m_R_y, "gamma", "DTRW vs YNM - Gumbel", xlab = "Gamma (γ)")
if(save == TRUE) {save_results(m_R_y, paste0(save_path,"/DTRW NT.xlsx"), "Yang_Gumbel_0_1")}
b <- seq(1, 5, 1)
m_R_c <- simulate_model(
param_values = b,
T = T,
sim = sim,
generator = rnorm,
param_name= "sd",
n_arg = "n",
test_fun = Test_DTRW_NT,
#test_args = list(alpha=0.05, method= "Bonf"),
series_args = list(mean=0)
)
plot_results(m_R_c, "sd", "DTRW vs Normal i.i.d", xlab= "σ")
Test_DTRW_NT
if(save == TRUE) {save_results(m_R_c,paste0(save_path,"/DTRW.xlsx"), "iid_Normal")}
if(save == TRUE) {save_results(m_R_c,paste0(save_path,"/DTRW NT.xlsx"), "iid_Normal")}
theta <- seq(0.01, 0.05, by=0.01)
m_R_L <- simulate_model(
param_values = theta,
T = T,
sim = sim,
generator = LDM_series,
param_name = "theta",
n_arg = "T",
test_fun = Test_DTRW_NT,
#test_args = list(method="Bonf"),
series_args = list(dist="norm", loc=0, sd=1)
)
plot_results(m_R_L, "theta", "DTRW vs LDM - Weibull", xlab="theta (Θ)")
ENT_LDM(T=50,"norm", loc=0, sd=1, theta=0.05)
ENT_DTRW(50)
plot_results(m_R_L, "theta", "DTRW vs LDM - Normal", xlab="theta (Θ)")
if(save == TRUE) {save_results(m_R_L, paste0(save_path,"/DTRW.xlsx"), "LDM_Norm_0_1")}
if(save == TRUE) {save_results(m_R_L, paste0(save_path,"/DTRW NT.xlsx"), "LDM_Norm_0_1")}
LDM_series_Weibull(50,0.05,1,1)
plot(LDM_series_Weibull(50,0.05,1,1))
plot(LDM_series_Weibull(50,0.05,1,5))
plot(LDM_series_Weibull(50,0.05,5,1))
theta <- seq(0.01, 0.05, by=0.01)
m_R_L <- simulate_model(
param_values = theta,
T = T,
sim = sim,
generator = LDM_series,
param_name = "theta",
n_arg = "T",
test_fun = Test_DTRW_NT,
#test_args = list(method="Bonf"),
series_args = list(dist="Weibull", shape=1, scale=5)
)
# ----------------------------------
# DTRW vs LDM
# ----------------------------------
theta <- seq(0.01, 0.05, by=0.01)
m_R_L <- simulate_model(
param_values = theta,
T = T,
sim = sim,
generator = LDM_series,
param_name = "theta",
n_arg = "T",
test_fun = Test_DTRW_NT,
#test_args = list(method="Bonf"),
series_args = list(dist="weibull", shape=1, scale=5)
)
plot_results(m_R_L, "theta", "DTRW vs LDM - Normal", xlab="theta (Θ)")
theta <- seq(0.01, 0.1, by=0.02)
m_R_L <- simulate_model(
param_values = theta,
T = T,
sim = sim,
generator = LDM_series,
param_name = "theta",
n_arg = "T",
test_fun = Test_DTRW_NT,
#test_args = list(method="Bonf"),
series_args = list(dist="weibull", shape=1, scale=5)
)
plot_results(m_R_L, "theta", "DTRW vs LDM - Normal", xlab="theta (Θ)")
ENT_LDM(T=50,"weibull", scale=5, shape=1, theta=0.05)
ENT_LDM(T=100,"weibull", scale=5, shape=1, theta=0.05)
ENT_LDM(T=100,"weibull", scale=5, shape=2, theta=0.05)
ENT_LDM(T=100,"weibull", scale=5, shape=5, theta=0.05)
plot(LDM_series_Weibull(100,0.1,5,5))
plot(LDM_series_Weibull(100,0.1,1,1))
theta <- seq(0.01, 0.1, by=0.02)
m_R_L <- simulate_model(
param_values = theta,
T = T,
sim = sim,
generator = LDM_series,
param_name = "theta",
n_arg = "T",
test_fun = Test_DTRW_NT,
#test_args = list(method="Bonf"),
series_args = list(dist="weibull", shape=1, scale=1)
)
plot_results(m_R_L, "theta", "DTRW vs LDM - Normal", xlab="theta (Θ)")
plot_results(m_R_L, "theta", "DTRW vs LDM - Normal", xlab="theta (Θ)")
T
if(save == TRUE) {save_results(m_R_L, paste0(save_path,"/DTRW NT.xlsx"), "LDM_wei_1_1")}
scale_vals <- seq(1, 2, by=1)
m_R_R <- simulate_model(
param_values = scale_vals,
T = T,
sim = sim,
generator = DTRW_series,
param_name = "sd",
n_arg = "T",
test_fun = Test_DTRW_NT,
#test_args = list(method="Bonf"),
series_args = list(dist="norm",loc=0)
)
plot_results(m_R_R, "sd", "DTRW Detetction Rate", ylab_name = "Type I Error (%)",xlab_name="σ", ymax = 25)
if(save == TRUE) {save_results(m_R_R, paste0(save_path,"/DTRW NT.xlsx"), "DTRW_detection")}
b <- seq(1, 5, 1)
m_y_c <- simulate_model(
param_values = b,
T = T,
sim = sim,
generator = rnorm,       # built-in uniform
param_name = "sd",
n_arg = "n",
test_fun = Test_Yang_NT,
series_args = list(mean=0),
#test_args = list(K=NULL, warmup=2)#list(alpha=0.05, Partition=NA, gamma=1, estimated=1)
)
library(readxl)
YANG <- read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/YANG.xlsx",
sheet = "Yang Detection")
View(YANG)
m <- as.data.frame(read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/YANG.xlsx",
sheet = "Yang Detection"))
View(m)
plot_results(m, "gamma", "Yang vs Yang-Frechet", xlab="Gamma", ymax= 25)
# ----------------------------------
#  Yang vs Yang (Detection Rate)
# ----------------------------------
gamma <- seq(1.01, 1.4, by=0.01)
m_y_y <- simulate_model(param_values = gamma,
T = T,
sim = sim,
generator = Yang_series,
param_name = "gamma", # varying param
n_arg = "T",             # custom generator expects T=
test_fun = Test_Yang_NT,
series_args = list(dist = "gumbel", loc=0, scale=1),
#test_args = list(K=NULL, warmup=2)#list(alpha=0.05, Partition=NA,gamma=1, estimated=1)
)
devtools::load_all(".")
?Test_Yang_NT
?Test_Yang_NT
x <- LDM_series(T=50, theta=0.5, dist="gumbel", loc=0, scale=1)
Test_Yang_NT(x)
y= VGAM::rgumbel(50,0,1)
Test_Yang_NT(y)
?Stirling_2nd_Yang
?Stirling_2nd_Yang
?Stirling_2nd_Yang
devtools::load_all(".")
gamma <- seq(1.01, 1.1, by=0.01)
m_y_y <- simulate_model(param_values = gamma,
T = T,
sim = sim,
generator = Yang_series,
param_name = "gamma", # varying param
n_arg = "T",             # custom generator expects T=
test_fun = Test_Yang_NT,
series_args = list(dist = "gumbel", loc=0, scale=1),
#test_args = list(K=NULL, warmup=2)#list(alpha=0.05, Partition=NA,gamma=1, estimated=1)
)
# ----------------------------------
#  Yang vs Yang (Detection Rate)
# ----------------------------------
gamma <- seq(1.01, 1.1, by=0.05)
m_y_y <- simulate_model(param_values = gamma,
T = T,
sim = sim,
generator = Yang_series,
param_name = "gamma", # varying param
n_arg = "T",             # custom generator expects T=
test_fun = Test_Yang_NT,
series_args = list(dist = "gumbel", loc=0, scale=1),
#test_args = list(K=NULL, warmup=2)#list(alpha=0.05, Partition=NA,gamma=1, estimated=1)
)
sim=10
m_y_y <- simulate_model(param_values = gamma,
T = T,
sim = sim,
generator = Yang_series,
param_name = "gamma", # varying param
n_arg = "T",             # custom generator expects T=
test_fun = Test_Yang_NT,
series_args = list(dist = "gumbel", loc=0, scale=1),
#test_args = list(K=NULL, warmup=2)#list(alpha=0.05, Partition=NA,gamma=1, estimated=1)
)
View(m_y_y)
gamma=c(1.3,1.4)
m_y_y <- simulate_model(param_values = gamma,
T = T,
sim = sim,
generator = Yang_series,
param_name = "gamma", # varying param
n_arg = "T",             # custom generator expects T=
test_fun = Test_Yang_NT,
series_args = list(dist = "gumbel", loc=0, scale=1),
#test_args = list(K=NULL, warmup=2)#list(alpha=0.05, Partition=NA,gamma=1, estimated=1)
)
View(m_y_y)
Test_Yang_NT(y)
Test_Yang_NT(rnorm(50,0,1))
Test_Yang_NT(rnorm(50,0,1))
Test_Yang_NT(rnorm(50,0,1))
X=y
T <- length(X)
obs <- rec_counts(X)
# --- Estimate gamma if not provided ---
if (is.na(gamma)) {
gamma <- Estim_gamma_indicator(X = X, min = 1, max = 5)
}
gamma = NA
# --- Estimate gamma if not provided ---
if (is.na(gamma)) {
gamma <- Estim_gamma_indicator(X = X, min = 1, max = 5)
}
# --- Variance and test statistic ---
v_gamma <- Estim_gamma_indicator_Variance(T = T, gamma = gamma)
z_theo <- gamma / sqrt(v_gamma)
alpha = 0.05
qnorm(alpha/2) <= z_theo
z_theo <= qnorm(1-alpha/2) & z_theo>= qnorm(alpha/2)
qnorm(1-alpha/2)
qnorm(alpha/2)
devtools::load_all(".")
Test_Yang_NT(y)
z_theo >= qnorm(1-alpha/2) | z_theo <= qnorm(alpha/2)
devtools::load_all(".")
Test_Yang_NT(y)
Test_Yang_NT(Yang_series_Exp(100,1.3,1))
Estim_gamma_indicator_Variance(T = 100, gamma = 1.23)
1.23/sqrt(0.00389)
10*1.23/sqrt(0.00389)
1.23/sqrt(0.00389*100)
devtools::load_all(".")
Estim_gamma_indicator_Variance(T = 100, gamma = 1.23)
devtools::load_all(".")
Estim_gamma_indicator_Variance(T = 100, gamma = 1.23)
Estim_gamma_indicator_Variance(T = 100, gamma = 1.23, TRUE)
devtools::load_all(".")
Estim_gamma_indicator_Variance(T = 100, gamma = 1.23, TRUE)
Estim_gamma_indicator_Variance(T = 100, gamma = 1.23, FALSE)
devtools::load_all(".")
Estim_gamma_indicator_Variance(T = 100, gamma = 1.23, FALSE)
Estim_gamma_indicator_Variance(T = 100, gamma = 1.23, TRUE)
sqrt(Estim_gamma_indicator_Variance(T = 100, gamma = 1.23, TRUE))
1.23 /sqrt(Estim_gamma_indicator_Variance(T = 100, gamma = 1.23, TRUE))
0.23 /sqrt(Estim_gamma_indicator_Variance(T = 100, gamma = 1.23, TRUE))
z_theo <- (gamma-1) / sqrt(v_gamma)
z_theo
qnorm(1-alpha/2)
qnorm(alpha/2)
z_theo <= qnorm(1-alpha/2) & z_theo >= qnorm(alpha/2)
devtools::load_all(".")
Test_Yang_NT(y)
gamma <- seq(1.5, 1.1, by=0.05)
T=c(50,100)
gamma <- seq(1.01, 1.1, by=0.05)
m_y_y <- simulate_model(param_values = gamma,
T = T,
sim = sim,
generator = Yang_series,
param_name = "gamma", # varying param
n_arg = "T",             # custom generator expects T=
test_fun = Test_Yang_NT,
series_args = list(dist = "gumbel", loc=0, scale=1),
#test_args = list(K=NULL, warmup=2)#list(alpha=0.05, Partition=NA,gamma=1, estimated=1)
)
plot_results(m_y_y, "gamma", "Yang vs Yang-Frechet", xlab="Gamma", ymax= 25)
plot_results(m_y_y, "gamma", "Yang vs Yang-Frechet", xlab="Gamma", ymax= 100)
y=Yang_series(100,"norm",mean=0, sd=1)
y=Yang_series(100,gamma=1.2,"norm",mean=0, sd=1)
y
plot(y)
Test_Yang_NT()
Test_Yang_NT(y)
0.12/Estim_gamma_indicator_Variance(100,1.12)
0.12/sqrt(Estim_gamma_indicator_Variance(100,1.12))
gamma <- seq(1.01, 1.5, by=0.05)
m_y_y <- simulate_model(param_values = gamma,
T = T,
sim = sim,
generator = Yang_series,
param_name = "gamma", # varying param
n_arg = "T",             # custom generator expects T=
test_fun = Test_Yang_NT,
series_args = list(dist = "gumbel", loc=0, scale=1),
#test_args = list(K=NULL, warmup=2)#list(alpha=0.05, Partition=NA,gamma=1, estimated=1)
)
plot_results(m_y_y, "gamma", "Yang vs Yang-Frechet", xlab="Gamma", ymax= 100)
T <- seq(40, 100, by = 10)
sim=100
gamma <- seq(1.01, 1.5, by=0.05)
m_y_y <- simulate_model(param_values = gamma,
T = T,
sim = sim,
generator = Yang_series,
param_name = "gamma", # varying param
n_arg = "T",             # custom generator expects T=
test_fun = Test_Yang_NT,
series_args = list(dist = "gumbel", loc=0, scale=1),
#test_args = list(K=NULL, warmup=2)#list(alpha=0.05, Partition=NA,gamma=1, estimated=1)
)
install.packages("usethis")
install.packages("usethis")
# -------------------------------
# Plotting Function
# -------------------------------
plot_results <- function(df, param_name, title, ylab_name = "Power of test (1-ß, %)", xlab_name = NULL, ymin=0, ymax=100 ) {
if (is.null(xlab_name)) xlab_name <- param_name
# detect T_ columns
T_cols <- grep("^T_", names(df), value = TRUE)
# reshape to long format
df_long <- reshape2::melt(df,
id.vars = c(param_name, "average"),
measure.vars = T_cols,
variable.name = "T",
value.name = "Power")
# clean legend labels (remove "T_")
df_long$T <- as.numeric(gsub("^T_", "", df_long$T))
# nice color scale (one color per T)
n_T <- length(T_cols)
#colors <- scales::hue_pal()(n_T)   # dynamic palette
#colors <- RColorBrewer::brewer.pal(min(8, n_T), "Dark2")
#colors <- rev(viridisLite::viridis(n_T))
p <- ggplot(df_long, aes(x = .data[[param_name]], y = Power, color = T, group = T)) +
geom_line(linewidth = 1.1, alpha = 0.8) +
geom_line(aes(y = average), df_long, color = "black", linewidth = 1.2, linetype = "dashed") +
#scale_color_manual(values = colors, name = "Sample size") +
scale_color_viridis_c(
option = "D", direction = -1, name = "Sample size (T)",
breaks = seq(40, 100, by = 10),   # show fewer ticks
labels = seq(40, 100, by = 10)
) +
ylab(ylab_name) + xlab(xlab_name) +
ggtitle(title) +
scale_x_continuous(n.breaks = 10)+
scale_y_continuous(n.breaks = 5, limits = c(ymin, ymax))+
theme_minimal(base_size = 12) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold", hjust = 0.5, size=16),
axis.title = element_text(face = "bold"),
#legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "grey95"),
panel.grid.minor = element_blank(),
# plot.background = element_rect(fill = "#f7f7f7", color = NA),
# panel.background = element_rect(fill = "#f7f7f7", color = NA)
)
return(p)
}
save_plot <- function(path, filename, plot){
ggsave(path = path, filename = filename, plot=plot, width = 7, height = 5, dpi = 600)
}
m <- as.data.frame(readxl::read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/YANG_Geom.xlsx",
sheet = "Detection"))
plot_results(m, "gamma", "", xlab="Gamma (γ)", ymax= 100)
# -------------------------------
# Plotting Function
# -------------------------------
library(ggplot2)
plot_results(m, "gamma", "", xlab="Gamma (γ)", ymax= 100)
plot_results(m, "gamma", "", xlab="Gamma (γ)", ymax= 70)
plot_results(m, "gamma", "", xlab="Gamma (γ)", ymax= 25)
library(ggplot2)
plot_results <- function(df, param_name, title, ylab_name = "Power of test (1-ß, %)", xlab_name = NULL, ymin=0, ymax=100 ) {
if (is.null(xlab_name)) xlab_name <- param_name
# detect T_ columns
T_cols <- grep("^T_", names(df), value = TRUE)
# reshape to long format
df_long <- reshape2::melt(df,
id.vars = c(param_name, "average"),
measure.vars = T_cols,
variable.name = "T",
value.name = "Power")
# clean legend labels (remove "T_")
df_long$T <- as.numeric(gsub("^T_", "", df_long$T))
# nice color scale (one color per T)
n_T <- length(T_cols)
#colors <- scales::hue_pal()(n_T)   # dynamic palette
#colors <- RColorBrewer::brewer.pal(min(8, n_T), "Dark2")
#colors <- rev(viridisLite::viridis(n_T))
p <- ggplot(df_long, aes(x = .data[[param_name]], y = Power, color = T, group = T)) +
geom_line(linewidth = 1.1, alpha = 0.8) +
geom_line(aes(y = average), df_long, color = "black", linewidth = 1.2, linetype = "dashed") +
#scale_color_manual(values = colors, name = "Sample size") +
scale_color_viridis_c(
option = "D", direction = -1, name = "Sample size (T)",
breaks = seq(40, 100, by = 10),   # show fewer ticks
labels = seq(40, 100, by = 10)
) +
ylab(ylab_name) + xlab(xlab_name) +
ggtitle(title) +
scale_x_continuous(n.breaks = 10)+
scale_y_continuous(n.breaks = 5, limits = c(ymin, ymax))+
theme_minimal(base_size = 12) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold", hjust = 0.5, size=16),
axis.title = element_text(face = "bold"),
#legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "grey95"),
panel.grid.minor = element_blank(),
# plot.background = element_rect(fill = "#f7f7f7", color = NA),
# panel.background = element_rect(fill = "#f7f7f7", color = NA)
)
return(p)
}
save_plot <- function(path, filename, plot){
ggsave(path = path, filename = filename, plot=plot, width = 7, height = 5, dpi = 600)
}
m <- as.data.frame(readxl::read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/LDM.xlsx",
sheet = "Detection"))
m <- as.data.frame(readxl::read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/LDM.xlsx",
sheet = "Detection"))
m <- as.data.frame(readxl::read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/LDM_2Stages.xlsx",
sheet = "Detection"))
View(m)
plot_results(m, "theta", "", xlab="Theta (Θ)", ymax= 25)
plot_results(m, "theta", "", xlab="Theta (Θ)", ymax= 10)
p = plot_results(m, "theta", "", xlab="Theta (Θ)", ymax= 25)
p
View(m)
p = plot_results(m, "theta", "", xlab="Theta (Θ)", ymax= 25, ylab = "Type I error (%)")
p
save_plot(path =paste0(save_path, "Figures"), filename = "LDM_2Stages_typeI.png" , plot = p)
save_path ="C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/"
save_plot(path =paste0(save_path, "Figures"), filename = "LDM_2Stages_typeI.png" , plot = p)
m <- as.data.frame(readxl::read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/Yang_NT.xlsx",
sheet = "Detection"))
m <- as.data.frame(readxl::read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/YANG_NT.xlsx",
sheet = "Detection"))
plot_results(m, "Gamma (γ)", "", xlab="Gamma (Θ)", ylab = "Type I error (%)")
plot_results(m, "gamma", "", xlab="Gamma (γ)", ylab = "Type I error (%)")
p = plot_results(m, "gamma", "", xlab="Gamma (γ)", ylab = "Type I error (%)")
p
save_plot(path =paste0(save_path, "Figures"), filename = "YANG_NT_typeI.png" , plot = p)
m <- as.data.frame(readxl::read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/LDM_2Stages.xlsx",
sheet = "Classical_Norm"))
m <- as.data.frame(readxl::read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/LDM_2Stages.xlsx",
sheet = "Classical_norm"))
m <- as.data.frame(readxl::read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/LDM_2Stages.xlsx",
sheet = "Classical_Normal"))
plot_results(m, "theta", "", xlab="Theta (Θ)", ylab = "Type I error (%)")
View(m)
plot_results(m, "sd", "", xlab="Scale (σ²)")
p = plot_results(m, "sd", "", xlab="Scale (σ²)")
p
save_plot(path =paste0(save_path, "Figures"), filename = "LDM_2Stages_Classical.png" , plot = p)
m <- as.data.frame(readxl::read_excel("C:/Users/User/OneDrive - Lebanese University/Lebanese University/PhD/Publication 3 - Decision Tree test/Power of Test/LDM_2Stages.xlsx",
sheet = "DTRW_Norm"))
plot_results(m, "sd", "", xlab="Scale (σ²)")
p = plot_results(m, "sd", "", xlab="Scale (σ²)")
p
save_plot(path =paste0(save_path, "Figures"), filename = "LDM_2Stages_DTRW.png" , plot = p)
devtools::load_all(".")
Test_LDM_Sequential(X)
X=rnorm(100,0,1)
Test_LDM_Sequential(X)
Yang_series(100,1.1, "beta")
Yang_series(100,1.1, "weibull",shape=1, scale=1)
X=Yang_series(100,1.1, "weibull",shape=1, scale=1)
plot(X)
X=Yang_series(100,1.01, "weibull",shape=1, scale=1)
plot(X)
Test_LDM_Sequential(X)
p
X=Yang_series(100,1.01, "norm",loc=0, sd=1)
plot(X)
Test_LDM_Sequential(X)
